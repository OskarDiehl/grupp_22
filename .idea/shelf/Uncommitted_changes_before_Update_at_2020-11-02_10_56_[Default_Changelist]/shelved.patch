Index: rogue_like/src/test/java/RoomTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.Test;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass RoomTest {\r\n\r\n\r\n\r\n\r\n// Ska denna testas med tanke på att den är privat?\r\n  @Test\r\n    void shouldGenerateNumberBetweenOneAndTen(){\r\n\r\n        Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior));\r\n        int num = room.generateRandomNumber(1,10);\r\n\r\n        assertTrue( 1 <= num && num <= 10, \"num: \" + num);\r\n    }\r\n\r\n    @Test\r\n    void ifArgumentExceptionIsThrownWhenMinValueBelowOneOnGenerateRandomNumber(){\r\n\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior));\r\n      assertThrows(IllegalArgumentException.class, () -> {\r\n          room.generateRandomNumber(0, 5);\r\n      });\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfRoomReturnsLuckyWheelWhenTrue(){\r\n      Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Runner));\r\n\r\n      assertEquals(\"Lucky Wheel\" , room.decideTypeOfRoom(true));\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfRoomIsNotEnemy(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Runner));\r\n\r\n        assertNotEquals(\"Enemy\" , room.decideTypeOfRoom(true));\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfRoomShouldBeEnemyWhenIsLuckyWheelFalse(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Runner));\r\n\r\n\r\n        assertEquals(\"Enemy\" , room.decideTypeOfRoom(false));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    @Test\r\n    void getPlayerShouldReturnCorrectPlayer(){\r\n    Player ply = new Player(\"test\",new EarthElement(1),Role.Warrior);\r\n    Room room = new Room(ply);\r\n\r\n    assertEquals(ply, room.getPlayer());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    @Test\r\n    void ifArgumentExceptionIsThrownWhenMinValueIsMoreThanMaxValueInGenerateRandomNumber(){\r\n\r\n        Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior));\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            room.generateRandomNumber(8, 7);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //TODO denna borde kanske testa ALLA enemies, inte bara den första\r\n    @Test void ifEnemiesAreTheRightElement(){\r\n      Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Warrior), new EarthElement(1), \"Enemy\");\r\n\r\n     assertTrue(room.getEnemies().get(3).getMainElement() instanceof EarthElement);\r\n    }\r\n\r\n    //TODO eventuellt fundera på att inte använda array? Vad händer exempelvis när en fiende dör? Kanske lättare att hålla koll på när rummet är klart via en lista och sen bara kolla när den är tom.\r\n\r\n    @Test void ifCorrectNumberOfEnemiesHaveBeenCreated(){\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior), \"Enemy\");\r\n\r\n      assertEquals(room.getEnemyQuantity(), room.getEnemies().size());\r\n\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void shouldGenerateElementForRoom(){\r\n      Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Runner));\r\n\r\n      assertNotEquals(null, room.getElement());\r\n\r\n    }\r\n\r\n    @Test\r\n    void roomTypeShouldNotBeEmptyWhenCreatingRoom(){\r\n      Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Tank), new FireElement(1));\r\n\r\n      assertNotEquals(null, room.getRoomType());\r\n  }\r\n\r\n\r\n\r\n    @Test\r\n    void roomTypeShouldBeLuckyWheel(){\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior), \"Lucky Wheel\");\r\n\r\n      assertEquals(\"Lucky Wheel\", room.getRoomType());\r\n  }\r\n\r\n    @Test\r\n    void roomTypeShouldBeEnemy(){\r\n        Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior), \"Enemy\");\r\n\r\n\r\n        assertEquals(\"Enemy\", room.getRoomType());\r\n\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void roomShouldBeLuckyWheel(){\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior), \"Lucky Wheel\");\r\n\r\n\r\n      assertEquals(\"Lucky Wheel\", room.getRoomType());\r\n\r\n\r\n    }\r\n\r\n\r\n    @Test\r\n    void removeEnemyShouldThrowIllegalArgumentWhenEnemyIsNotInEnemies(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Runner), \"Enemy\");\r\n        Enemy enemy = new Enemy(room.getElement(), 1,room);\r\n\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n           room.removeEnemy(enemy);\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    @Test\r\n    void enemyCantSpawnWhenPlayerHas3MedallionsOfRoomsElement(){\r\n      FireElement elm = new FireElement(1);\r\n      Player ply = new Player(\"test\", elm, Role.Runner);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n\r\n      Room room = new Room(ply, elm, \"Enemy\");\r\n\r\n\r\n      assertEquals(\"Boss\",room.getRoomType());\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void bossCantSpawnWhenPlayerDoesNotHaveEnoughMedallionsOfRoomElement(){\r\n      EarthElement elm = new EarthElement(1);\r\n      Player ply = new Player(\"test\", elm, Role.Runner);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n\r\n\r\n      Room room = new Room(ply, elm, \"Enemy\");\r\n\r\n\r\n      assertNotEquals(\"Boss\",room.getRoomType());\r\n\r\n    }\r\n\r\n    @Test\r\n    void isEnemiesDeadShouldReturnTrueWhenAllEnemiesRemoved(){\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior),\"Enemy\");\r\n\r\n      ArrayList<Enemy> enemies = room.getEnemies();\r\n\r\n      for( Enemy e : enemies){\r\n        room.removeEnemy(e);\r\n      }\r\n\r\n      assertTrue(room.isEnemiesDead());\r\n\r\n\r\n    }\r\n\r\n  @Test\r\n  void isEnemiesDeadShouldReturnFalseWhenNotAllEnemiesRemoved(){\r\n    Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Warrior), \"Enemy\");\r\n\r\n    assertFalse(room.isEnemiesDead());\r\n\r\n\r\n  }\r\n\r\n  @Test\r\n  void luckyWheelShouldBeCreatedWhenItHasSpawned(){\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior));\r\n\r\n      while(room.getRoomType() != \"Lucky Wheel\"){\r\n        room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior));\r\n      }\r\n\r\n      assertNotNull(room.getLuckyWheel());\r\n\r\n  }\r\n\r\n  @Test\r\n  void luckyWheelShouldntBeCreatedWhenItHasntSpawned(){\r\n    Room room = new Room(new Player(\"test\",new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n\r\n    assertNull(room.getLuckyWheel());\r\n\r\n  }\r\n\r\n  @Test\r\n  void itemDroppedShouldNotBeNullWhenAllEnemiesAreKilled(){\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior), new EarthElement(1),\"Enemy\");\r\n\r\n\r\n      ArrayList<Enemy> enemies = room.getEnemies();\r\n\r\n      for(Enemy e: enemies){\r\n        room.removeEnemy(e);\r\n      }\r\n\r\n      assertNotNull(room.getItemDropped());\r\n\r\n  }\r\n\r\n  @Test\r\n  void itemDroppedShouldBeNullWhenEnemiesAreAlive(){\r\n\r\n      Room room = new Room(new Player(\"test\",new EarthElement(1),Role.Warrior), \"Enemy\");\r\n\r\n\r\n\r\n    assertNull(room.getItemDropped());\r\n\r\n    }\r\n\r\n  @Test\r\n  void bossShouldNotBeNull(){\r\n      FireElement elm = new FireElement(1);\r\n      Player ply = new Player(\"test\",elm, Role.Tank);\r\n\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n\r\n      Room room = new Room(ply, elm);\r\n\r\n      while(room.getRoomType() == \"Lucky Wheel\"){\r\n        room = new Room(ply, elm);\r\n      }\r\n\r\n      assertNotNull(room.getBoss());\r\n\r\n\r\n\r\n  }\r\n\r\n  @Test\r\n  void bossShouldBeNull() {\r\n    FireElement elm = new FireElement(1);\r\n    Player ply = new Player(\"test\", elm, Role.Tank);\r\n\r\n    ply.addMedallion(elm);\r\n\r\n    Room room = new Room(ply, elm);\r\n\r\n    while (room.getRoomType() == \"Lucky Wheel\") {\r\n      room = new Room(ply, elm);\r\n    }\r\n\r\n    assertNull(room.getBoss());\r\n\r\n\r\n  }\r\n\r\n\r\n  @Test\r\n  void bossShouldBeRemoved(){\r\n      Player ply = new Player(\"Test\", new FireElement(1), Role.Tank);\r\n      EarthElement elm = new EarthElement(1);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n\r\n      Room room = new Room(ply, elm, \"Enemy\");\r\n      room.removeBoss();\r\n\r\n      assertNull(room.getBoss());\r\n  }\r\n\r\n  @Test\r\n    void fireElementRoomShouldReturnFireElement(){\r\n        Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Warrior), new FireElement(1));\r\n\r\n        assertTrue(room.getElement() instanceof FireElement);\r\n  }\r\n\r\n    @Test\r\n    void earthElementRoomShouldReturnEarthElement(){\r\n        Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Warrior), new EarthElement(1));\r\n\r\n        assertTrue(room.getElement() instanceof EarthElement);\r\n    }\r\n\r\n    @Test\r\n    void waterElementRoomShouldReturnWaterElement(){\r\n        Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Warrior), new WaterElement(1));\r\n\r\n        assertTrue(room.getElement() instanceof WaterElement);\r\n    }\r\n\r\n    @Test\r\n    void waterElementRoomShouldReturnWindElement(){\r\n        Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Warrior), new WindElement(1));\r\n\r\n        assertTrue(room.getElement() instanceof WindElement);\r\n    }\r\n\r\n    @Test\r\n    void spawnEnemiesShouldReturnArrayListOfSameSizeAsEnemies(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n        assertEquals(room.spawnEnemies().size(), room.getEnemies().size());\r\n\r\n    }\r\n\r\n    @Test\r\n    void whenBossSpawnedBossShouldNotBeNull(){\r\n        Player ply = new Player(\"Test\", new FireElement(1), Role.Tank);\r\n\r\n        Room room = new Room(ply, \"Enemy\");\r\n        room.spawnBoss();\r\n\r\n        assertNotNull(room.getBoss());\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfElementShouldBeFire(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n        assertTrue(room.decideTypeOfElement(1) instanceof FireElement);\r\n\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfElementShouldBeWater(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n        assertTrue(room.decideTypeOfElement(2) instanceof WaterElement);\r\n\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfElementShouldBeWind(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n        assertTrue(room.decideTypeOfElement(3) instanceof WindElement);\r\n\r\n    }\r\n\r\n    @Test\r\n    void decideTypeOfElementShouldBeEarth(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n\r\n        assertTrue(room.decideTypeOfElement(4) instanceof EarthElement);\r\n\r\n    }\r\n\r\n\r\n    @Test\r\n    void decideTypeOfElementShouldThrowIllegalArgumentException(){\r\n        Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Enemy\");\r\n\r\n\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            room.decideTypeOfElement(6);\r\n        });\r\n\r\n    }\r\n\r\n    @Test\r\n    void illegalStateExceptionThrownWhenRoomTypeIsNotLuckyWheel(){\r\n        Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Tank), \"Enemy\");\r\n\r\n        assertThrows(IllegalStateException.class, () -> {\r\n            room.spinTheLuckyWheel();\r\n        });\r\n\r\n    }\r\n\r\n    @Test\r\n    void itemDroppedFromLuckyWheelIsInstanceOfItem(){\r\n        Room room = new Room(new Player(\"Test\", new EarthElement(1), Role.Tank), \"Lucky Wheel\");\r\n        room.spinTheLuckyWheel();\r\n\r\n        while(room.getItemDropped() == null){\r\n            room.spinTheLuckyWheel();\r\n        }\r\n\r\n        assertTrue(room.getItemDropped() instanceof Item);\r\n\r\n    }\r\n\r\n    @Test\r\n    void givePlayerElementGivesElementToPlayer(){\r\n      Player ply = new Player(\"Test\", new FireElement(1), Role.Tank);\r\n      Room room = new Room(ply, new EarthElement(1));\r\n      room.givePlayerElement();\r\n      assertTrue(ply.findElement(\"earth\") instanceof EarthElement);\r\n\r\n    }\r\n\r\n    @Test\r\n    void illegalArgumentThrownWhenRoomTypeNotEnemyOrLuckyWheel(){\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            new Room(new Player(\"Test\",new WaterElement(1), Role.Tank), \"asdfasdf\");\r\n\r\n        });\r\n    }\r\n\r\n    @Test\r\n    void illegalArgumentThrownWhenRemoveBossWhenBossDontExists(){\r\n      Room room = new Room(new Player(\"Test\", new FireElement(1), Role.Tank), \"Lucky Wheel\");\r\n\r\n        assertThrows(IllegalStateException.class, () -> {\r\n            room.removeBoss();\r\n        });\r\n\r\n    }\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- rogue_like/src/test/java/RoomTest.java	(revision b5d559201e4d85c1de2022419e67e54a1c32ec06)
+++ rogue_like/src/test/java/RoomTest.java	(date 1604277369487)
@@ -212,14 +212,8 @@
 
   @Test
   void luckyWheelShouldBeCreatedWhenItHasSpawned(){
-      Room room = new Room(new Player("test",new EarthElement(1),Role.Warrior));
-
-      while(room.getRoomType() != "Lucky Wheel"){
-        room = new Room(new Player("test",new EarthElement(1),Role.Warrior));
-      }
-
+      Room room = new Room(new Player("test",new EarthElement(1),Role.Warrior), "Lucky Wheel");
       assertNotNull(room.getLuckyWheel());
-
   }
 
   @Test
