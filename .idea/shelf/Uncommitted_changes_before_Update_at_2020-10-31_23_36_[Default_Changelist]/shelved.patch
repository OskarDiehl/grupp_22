Index: rogue_like/src/main/java/Enemy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Enemy extends Character {\r\n    private final static int LEVEL_1_STAT = 3;\r\n    private final static int LEVEL_2_STAT = 5;\r\n    private final static int LEVEL_3_STAT = 8;\r\n\r\n    private EnemyStats stats;\r\n    private Room room;\r\n\r\n    public Enemy(Element mainElement, int level, Room room) {       //TODO Jag döpte om element till mainElement för att hålla reda på vad som är vad. Hoppas att det är okej. Hojta till annars! /Malin\r\n        super(mainElement, level);\r\n        this.room = room;\r\n        calculateStats(level);\r\n    }\r\n\r\n    private void calculateStats(int level) { // Depending on the level, the default stats change\r\n        int statForLevel;\r\n        if (level == 1) {\r\n            statForLevel = LEVEL_1_STAT;\r\n        } else if (level == 2){\r\n            statForLevel = LEVEL_2_STAT;\r\n        } else {\r\n            statForLevel = LEVEL_3_STAT;\r\n        }\r\n        generateStats(statForLevel, statForLevel, statForLevel);\r\n    }\r\n\r\n    void generateStats(int life, int power, int speed) {\r\n        stats = new EnemyStats(life, power, speed);\r\n    }\r\n\r\n    public void attack(Player player) { //TODO gör något åt den höga couplingen vi har, kanske flytta all attackberäkning till Character?\r\n        int attackPower = getMainElement().attack(player.getMainElement());\r\n        player.getPlayerStats().loseHP(attackPower);\r\n        //player.getPlayerStats().attackedByAnEnemy(attackPower); //Väntar på bekräftelse\r\n    }\r\n\r\n    public boolean isDead() {\r\n        return getStats().getCurrentHP() <= 0;\r\n    }\r\n\r\n    public void removeIfDead() {\r\n        if (isDead())\r\n            room.removeEnemy(this);\r\n    }\r\n\r\n    public EnemyStats getStats() {\r\n        return stats;\r\n    }\r\n\r\n    public Room getRoom() {\r\n        return room;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- rogue_like/src/main/java/Enemy.java	(revision dc535f6f81653a2b5d120f1bea62d837733a4318)
+++ rogue_like/src/main/java/Enemy.java	(date 1604181597343)
@@ -29,8 +29,8 @@
     }
 
     public void attack(Player player) { //TODO gör något åt den höga couplingen vi har, kanske flytta all attackberäkning till Character?
-        int attackPower = getMainElement().attack(player.getMainElement());
-        player.getPlayerStats().loseHP(attackPower);
+        //int attackPower = getMainElement().attack(player.getMainElement());
+       // player.getPlayerStats().loseHP(attackPower);
         //player.getPlayerStats().attackedByAnEnemy(attackPower); //Väntar på bekräftelse
     }
 
Index: rogue_like/src/main/java/LuckyWheel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\n\r\npublic class LuckyWheel {\r\n\r\n    private Item[] ITEMS_AVAILABLE;\r\n    private final int DROPTABLE_SIZE = 10;\r\n    private Room room;\r\n    private ArrayList<Object> droptable;\r\n\r\n\r\n    public LuckyWheel(Room room) {\r\n        this.room = room;\r\n        this.ITEMS_AVAILABLE = room.getITEMS();\r\n\r\n\r\n    }\r\n\r\n    public void placeRandomItemsInDropTable()\r\n\r\n    {\r\n        int size = room.getITEMS().length - 1;\r\n        droptable.add(0,\"DEATH\");\r\n        droptable.add(DROPTABLE_SIZE-1, \"DEATH\");\r\n\r\n        for(int i = 1; i< DROPTABLE_SIZE-1;i++ ){\r\n            droptable.add(i,ITEMS_AVAILABLE[generateRandomNumber(1,size)]);\r\n        }\r\n\r\n        }\r\n\r\n\r\n        public Item spinLuckyWheel () {\r\n            int num = generateRandomNumber(1,10);\r\n\r\n            if(droptable.get(num).equals(\"DEATH\")){\r\n                room.getPlayer().getPlayerStats().loseHP(room.getPlayer().getCurrentHPFromStats());\r\n                return null;\r\n            }\r\n\r\n            Item item = (Item)droptable.get(num);\r\n\r\n            return item;\r\n    }\r\n\r\n\r\n        private int generateRandomNumber ( int min, int max){\r\n\r\n\r\n        if (min < 1 || max < 1 || min > max) {\r\n            throw new IllegalArgumentException();\r\n        } else {\r\n            max += 1;\r\n\r\n            return (int) ((Math.random() * (max - min)) + min);\r\n        }\r\n    }\r\n    }\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- rogue_like/src/main/java/LuckyWheel.java	(revision dc535f6f81653a2b5d120f1bea62d837733a4318)
+++ rogue_like/src/main/java/LuckyWheel.java	(date 1604183796703)
@@ -5,56 +5,49 @@
     private Item[] ITEMS_AVAILABLE;
     private final int DROPTABLE_SIZE = 10;
     private Room room;
-    private ArrayList<Object> droptable;
+    private ArrayList<Object> droptable = new ArrayList<>();
 
 
     public LuckyWheel(Room room) {
         this.room = room;
         this.ITEMS_AVAILABLE = room.getITEMS();
+        placeRandomItemsInDropTable();
 
 
     }
 
-    public void placeRandomItemsInDropTable()
-
-    {
-        int size = room.getITEMS().length - 1;
-        droptable.add(0,"DEATH");
-        droptable.add(DROPTABLE_SIZE-1, "DEATH");
-
-        for(int i = 1; i< DROPTABLE_SIZE-1;i++ ){
-            droptable.add(i,ITEMS_AVAILABLE[generateRandomNumber(1,size)]);
+    public void placeRandomItemsInDropTable() {
+        int size = room.getITEMS().length;
+        droptable.add(0, "DEATH");
+        for (int i = 1; i < DROPTABLE_SIZE - 1; i++) {
+            int rndNum = room.generateRandomNumber(1, size) - 1;
+            droptable.add(i, ITEMS_AVAILABLE[rndNum]);
         }
+        droptable.add(DROPTABLE_SIZE - 1, "DEATH");
 
-        }
+    }
 
 
-        public Item spinLuckyWheel () {
-            int num = generateRandomNumber(1,10);
+    public Item spinLuckyWheel() {
+        int num = room.generateRandomNumber(1, 10) - 1;
 
-            if(droptable.get(num).equals("DEATH")){
-                room.getPlayer().getPlayerStats().loseHP(room.getPlayer().getCurrentHPFromStats());
-                return null;
-            }
+        if (droptable.get(num).equals("DEATH")) {
+            room.getPlayer().getPlayerStats().loseHP(room.getPlayer().getCurrentHPFromStats());
+            return null;
+        }
 
-            Item item = (Item)droptable.get(num);
+        Item item = (Item) droptable.get(num);
 
-            return item;
+        return item;
     }
 
-
-        private int generateRandomNumber ( int min, int max){
+    public ArrayList<Object> getDroptable() {
+        return new ArrayList<Object>(droptable);
+    }
+}
 
 
-        if (min < 1 || max < 1 || min > max) {
-            throw new IllegalArgumentException();
-        } else {
-            max += 1;
 
-            return (int) ((Math.random() * (max - min)) + min);
-        }
-    }
-    }
 
 
 
Index: rogue_like/src/test/java/RoomTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.Test;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass RoomTest {\r\n\r\n\r\n\r\n\r\n// Ska denna testas med tanke på att den är privat?\r\n  @Test\r\n    void shouldGenerateNumberBetweenOneAndTen(){\r\n\r\n        Room room = new Room();\r\n        int num = room.generateRandomNumber(1,10);\r\n\r\n        assertTrue( 1 <= num && num <= 10, \"num: \" + num);\r\n    }\r\n\r\n    @Test\r\n    void ifArgumentExceptionIsThrownWhenMinValueBelowOneOnGenerateRandomNumber(){\r\n\r\n      Room room = new Room();\r\n      assertThrows(IllegalArgumentException.class, () -> {\r\n          room.generateRandomNumber(0, 5);\r\n      });\r\n    }\r\n\r\n    @Test\r\n    void getPlayerShouldReturnCorrectPlayer(){\r\n    Player ply = new Player(\"test\",new EarthElement(1),Role.Warrior);\r\n    Room room = new Room(ply);\r\n\r\n    assertEquals(ply, room.getPlayer());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    @Test\r\n    void ifArgumentExceptionIsThrownWhenMinValueIsMoreThanMaxValueInGenerateRandomNumber(){\r\n\r\n        Room room = new Room();\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            room.generateRandomNumber(8, 7);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //TODO denna borde kanske testa ALLA enemies, inte bara den första\r\n    @Test void ifEnemiesAreTheRightElement(){\r\n      Room room = new Room();\r\n\r\n      Element el = room.getElement();\r\n     //assertTrue(room.getEnemies().get(3).getMainElement() instanceof el.getClass());\r\n    }\r\n\r\n    //TODO eventuellt fundera på att inte använda array? Vad händer exempelvis när en fiende dör? Kanske lättare att hålla koll på när rummet är klart via en lista och sen bara kolla när den är tom.\r\n\r\n    @Test void ifCorrectNumberOfEnemiesHaveBeenCreated(){\r\n      Room room = new Room();\r\n\r\n      assertEquals(room.getEnemyQuantity(), room.getEnemies().size());\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    @Test void GenerateAmountOfEnemiesIsTheCorrectIntervall(){\r\n\r\n    }\r\n\r\n    @Test\r\n    void shouldGenerateElementForRoom(){\r\n      Room room = new Room();\r\n    }\r\n\r\n    @Test\r\n    void roomTypeShouldNotBeEmptyWhenCreatingRoom(){\r\n      Room room = new Room();\r\n\r\n      assertNotEquals(null, room.getRoomType());\r\n  }\r\n\r\n    //det finns de fyra element rummen + boss rummen för vardera + lyckohjulsrum\r\n    @Test\r\n    void roomTypeShouldBeLuckyWheel(){\r\n      Room room = new Room();\r\n\r\n      while(room.getRoomType() != \"Lucky Wheel\"){\r\n        room = new Room();\r\n      }\r\n      assertEquals(\"Lucky Wheel\", room.getRoomType());\r\n  }\r\n\r\n\r\n\r\n  //eftersom maxIntervall är 1 borde det alltid bli rätt?\r\n  // Testar så att när max intervallet är samma som det random numret så blir det true\r\n\r\n\r\n\r\n      /*så när rummet skapas bör decideTypeOfRoom kallas på som bara avgör om det blir ett lyckohjulsrum eller inte (1/5).\r\n      I ett senare skede bör det avgöras om spelaren har dem tre medaljongerna för att spawna en boss eller spawna enemies\r\n      Kanske i en decideTypeOfEnemy metod.\r\n\r\n\r\n      Men var ska informationen om vilken typ av rum det är sparas? Bör det finnas typ en sträng med \"BOSS\", \"ENEMY\" och \"LUCKY WHEEL\"\r\n      Eller är det ens nödvändigt? Ska det bara vara om rummet inte har något Element ska det anses som lucky wheel?\r\n\r\n\r\n       */\r\n\r\n\r\n    //TODO metoden decideTypeOfRoom borde alltså kallas med en metod som har en chans 1 / 5 att returnera true\r\n    @Test\r\n    void roomTypeShouldBeEnemy(){\r\n        Room room = new Room();\r\n        room.decideTypeOfRoom(false);\r\n\r\n        assertEquals(\"Enemy\", room.getRoomType());\r\n\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void roomShouldBeLuckyWheel(){\r\n      Room room = new Room();\r\n      room.decideTypeOfRoom(true);\r\n\r\n      assertEquals(\"Lucky Wheel\", room.getRoomType());\r\n\r\n\r\n    }\r\n    @Test\r\n    void ifRemoveEnemyRemovesTheCorrectEnemy(){\r\n\r\n    }\r\n\r\n    @Test\r\n    void itemShouldDropWhenAllEnemiesAreDead(){\r\n        Room room = new Room();\r\n\r\n\r\n\r\n        //room.checkIfEnemiesDead(){\r\n\r\n        }\r\n\r\n    @Test\r\n    void elementShouldBeAddedToPlayerWhenKilledBoss(){\r\n\r\n    }\r\n\r\n    @Test\r\n    void itemShouldDropWhenLuckyWheelIsActivated(){\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void enemyCantSpawnWhenPlayerHas3MedallionsOfRoomsElement(){\r\n      FireElement elm = new FireElement(1);\r\n      Player ply = new Player(\"test\", elm, Role.Runner);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n\r\n      Room room = new Room(ply, elm);\r\n\r\n\r\n\r\n      assertNotEquals(\"Enemy\",room.getRoomType());\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void bossCantSpawnWhenPlayerDoesNotHaveEnoughMedallionsOfRoomElement(){\r\n      FireElement elm = new FireElement(1);\r\n      Player ply = new Player(\"test\", elm, Role.Runner);\r\n      ply.addMedallion(elm);\r\n      ply.addMedallion(elm);\r\n\r\n\r\n      Room room = new Room(ply, elm);\r\n\r\n      assertNotEquals(\"Boss\",room.getRoomType());\r\n\r\n    }\r\n\r\n\r\n        /*\r\n        Hur kontrollerar vi att alla enemies är döda?\r\n        När en enemy är död måste det på något sätt skickas till Room, där vi sedan kan\r\n        checka så att inte alla monster är döda. Om dem är döda så bör spawnItem kallas på.\r\n         */\r\n\r\n\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- rogue_like/src/test/java/RoomTest.java	(revision dc535f6f81653a2b5d120f1bea62d837733a4318)
+++ rogue_like/src/test/java/RoomTest.java	(date 1604182366311)
@@ -171,16 +171,19 @@
 
       Room room = new Room(ply, elm);
 
+      while(room.getRoomType() == "Lucky Wheel") {
+        room = new Room(ply, elm);
+      }
 
 
-      assertNotEquals("Enemy",room.getRoomType());
+      assertEquals("Boss",room.getRoomType());
     }
 
 
 
     @Test
     void bossCantSpawnWhenPlayerDoesNotHaveEnoughMedallionsOfRoomElement(){
-      FireElement elm = new FireElement(1);
+      EarthElement elm = new EarthElement(1);
       Player ply = new Player("test", elm, Role.Runner);
       ply.addMedallion(elm);
       ply.addMedallion(elm);
@@ -188,6 +191,10 @@
 
       Room room = new Room(ply, elm);
 
+      while(room.getRoomType() == "Lucky Wheel") {
+        room = new Room(ply, elm);
+      }
+
       assertNotEquals("Boss",room.getRoomType());
 
     }
Index: rogue_like/src/test/java/LuckyWheelTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass LuckyWheelTest {\r\n\r\n    @Test\r\n    void spinLuckyWheel() {\r\n    }\r\n\r\n    @Test\r\n    void getRoom() {\r\n    }\r\n\r\n\r\n    @Test\r\n    void deathShouldBePlacedOnFirstIndex(){\r\n\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void deathShouldBePlacedOnLastIndex(){\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- rogue_like/src/test/java/LuckyWheelTest.java	(revision dc535f6f81653a2b5d120f1bea62d837733a4318)
+++ rogue_like/src/test/java/LuckyWheelTest.java	(date 1604183502814)
@@ -15,13 +15,64 @@
 
     @Test
     void deathShouldBePlacedOnFirstIndex(){
+        Room room = new Room();
+        while(room.getRoomType() != "Lucky Wheel"){
+            room = new Room();
+        }
 
+        LuckyWheel lw = room.getLuckyWheel();
 
 
+        assertEquals("DEATH", lw.getDroptable().get(0));
     }
+
+
 
     @Test
     void deathShouldBePlacedOnLastIndex(){
+        Room room = new Room();
+        while(room.getRoomType() != "Lucky Wheel"){
+            room = new Room();
+        }
+
+        LuckyWheel lw = room.getLuckyWheel();
+        int lastIndex = lw.getDroptable().size() -1;
 
+        assertEquals("DEATH", lw.getDroptable().get(lastIndex));
+
+    }
+
+    @Test
+    void playerShouldLoseAllHPWhenLuckyWheelIsDeath(){
+        Room room = new Room();
+        while(room.getRoomType() != "Lucky Wheel"){
+            room = new Room();
+        }
+
+        LuckyWheel lw = room.getLuckyWheel();
+        Item item = lw.spinLuckyWheel();
+        while(item != null) {
+            item = lw.spinLuckyWheel();
+        }
+
+        Player player = room.getPlayer();
+        assertEquals(0, player.getCurrentHPFromStats());
+
+    }
+
+    @Test
+    void spinLuckyWheelShouldReturnItemWhenWheelIsNotDEATH(){
+        Room room = new Room();
+        while(room.getRoomType() != "Lucky Wheel"){
+            room = new Room();
+        }
+
+        LuckyWheel lw = room.getLuckyWheel();
+        Item item = lw.spinLuckyWheel();
+        while(item == null){
+            item = lw.spinLuckyWheel();
+        }
+
+        assertTrue(item instanceof Item);
     }
 }
\ No newline at end of file
Index: rogue_like/src/main/java/Room.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//TODO organisera metoder, alla enemy metoder borde vara ihop exempelvis.\r\n\r\n//TODO lös ett bra sätt att ta fram om rummet ska vara ett LuckyWheel eller inte\r\n\r\n//TODO lös ett sätt för att generera ett random element för rummet (om det inte är ett luckywheel rum)\r\n\r\n//TODO rummet måste kunna komma åt en players \"medaljonger\" för att avgöra om det blir boss eller inte\r\n\r\n//TODO ändra spawnItem till att inte vara random\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Room {\r\n\r\n    private final Item[] ITEMS = new Item[]{\r\n            new Weapon(\"Boring Sword\", 1, 0),\r\n            new Weapon(\"Cool Sword\", 3,-1),\r\n            new Weapon(\"Mega Hammer\", 10,-5),\r\n            new Weapon(\"Dinky Hammer\",-1,0),\r\n            new Weapon(\"Cast Iron Frying Pan\", 4, -2),\r\n\r\n            new Armor(\"Knight's Armor\", 4, -2),\r\n            new Armor(\"Leather Scrap Armor\", 1, 0),\r\n            new Armor(\"Wearable Bank Vault\", 10, -10),\r\n            new Armor(\"Bussiness Casual\", 0, 0),\r\n            new Armor(\"Birthday Suit\", 0, 0),\r\n\r\n            new Shoes(\"Flip Flops\", 1, -1),\r\n            new Shoes(\"Sneakers\", 3, 0),\r\n            new Shoes(\"Yeezys\", 4, -1),\r\n            new Shoes(\"Clogs\", 2, -3),\r\n            new Shoes(\"Stilettos\", 8, -4)\r\n\r\n    };\r\n\r\n\r\n     private final int MIN_THRESHOLD = 1;\r\n     private final int AMOUNT_OF_ELEMENTS = 4;\r\n\r\n     private final int MAX_AMOUNT_OF_ENEMIES = 7;\r\n     private final int MIN_AMOUNT_OF_ENEMIES = 4;\r\n     private final int MAX_NUMBER_LUCKY_WHEEL = 5;\r\n\r\n     private ArrayList<Enemy> enemies; //denna ska ändras till en arraylist efter funderande\r\n     private int enemyQuantity;\r\n     private String roomType;\r\n     private Element element;\r\n     private int threshold;\r\n     private Player player;\r\n\r\n     //TODO borde player vara ett argument i konstruktorn?\r\n\r\n     public Room(){\r\n         this(new Player(\"test\",new FireElement(1), Role.Tank));\r\n     }\r\n\r\n     public Room(Player player , Element element){\r\n         this.element = element;\r\n         this.player = player;\r\n         buildRoom();\r\n     }\r\n\r\n\r\n     public Room(Player player){\r\n         this.player = player;\r\n         this.element = decideTypeOfElement(generateRandomNumber(MIN_THRESHOLD, AMOUNT_OF_ELEMENTS));\r\n         buildRoom();\r\n\r\n\r\n     }\r\n\r\n    private void buildRoom(){\r\n        decideTypeOfRoom(decideIfLuckyWheel());\r\n\r\n        switch(roomType) {\r\n            case \"Enemy\": spawnEnemies(); break;\r\n            case \"Boss\": spawnBoss(); break;\r\n            case \"Lucky Wheel\": spawnLuckyWheel(); break;\r\n        }\r\n    }\r\n\r\n    public String decideTypeOfRoom(boolean isItLuckyWheel){\r\n        if( (isItLuckyWheel)){\r\n            roomType = \"Lucky Wheel\";\r\n        }\r\n        else {\r\n\r\n            if (shouldBossSpawn()){\r\n                roomType = \"Boss\";\r\n            }\r\n\r\n            else {\r\n                roomType = \"Enemy\";\r\n            }\r\n        }\r\n        return roomType;\r\n    }\r\n\r\n\r\n    private boolean decideIfLuckyWheel(){\r\n        if(generateRandomNumber(MIN_THRESHOLD, MAX_NUMBER_LUCKY_WHEEL) == MAX_NUMBER_LUCKY_WHEEL){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n\r\n    public Element decideTypeOfElement(int elementNumber){ //denna är private eftersom jag endast vill att ett element ska kunna kallas på en gång\r\n\r\n        if(element == null) {\r\n\r\n            switch (elementNumber) {\r\n                case 1:\r\n                    element = new FireElement(1);\r\n                    break;\r\n                case 2:\r\n                    element = new WaterElement(1);\r\n                    break;\r\n                case 3:\r\n                    element = new WindElement(1);\r\n                    break;\r\n                case 4:\r\n                    element = new EarthElement(1);\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return element;\r\n\r\n    }\r\n\r\n    public void spawnEnemies(){\r\n        enemyQuantity = generateAmountOfEnemies();\r\n        enemies = new ArrayList();\r\n\r\n        for(int i = 0; i < enemyQuantity; i++){\r\n            enemies.add(new Enemy(getElement() , 1, this));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public boolean shouldBossSpawn(){\r\n         int medallions =0;\r\n         String elementName = getElement().getClass().getName();\r\n         if(elementName.equals(\"FireElement\"))\r\n             medallions = player.getFireMedallions();   // TODO Jag tog bort \"get-metoderna för medaljongerna då jag skapade metoden \"fetchMedallionStatus\" /Malin\r\n         else if(elementName.equals(\"EarthElement\"))\r\n             medallions = player.getEarthMedallions();\r\n\r\n         if(medallions == 3){\r\n             return true;\r\n         }\r\n         return false;\r\n     }\r\n\r\n    public void spawnBoss(){\r\n\r\n    }\r\n\r\n\r\n    //TODO göra en klass för lucky wheel?\r\n    public void spawnLuckyWheel(){\r\n\r\n\r\n    }\r\n\r\n    public Item spawnItem(){\r\n         return ITEMS[generateRandomNumber(1,ITEMS.length-1)];\r\n     }\r\n\r\n\r\n    public Player getPlayer() {\r\n        return player;\r\n    }\r\n\r\n    public Element getElement() {\r\n        return element;\r\n    }\r\n\r\n    public ArrayList<Enemy> getEnemies(){\r\n        return enemies;\r\n    }\r\n\r\n    public boolean isEnemiesDead() {\r\n        if (enemies.isEmpty()) {\r\n            return true;\r\n        }\r\n        return false;\r\n     }\r\n\r\n    public int generateAmountOfEnemies(){\r\n         return generateRandomNumber(MIN_AMOUNT_OF_ENEMIES, MAX_AMOUNT_OF_ENEMIES);\r\n     }\r\n\r\n    public String getRoomType() {\r\n        return roomType;\r\n    }\r\n\r\n    public int getEnemyQuantity() {\r\n        return enemyQuantity;\r\n    }\r\n\r\n    //TODO måste denna kallas på av enemy klassen? när dennes hp går ner till 0? Isåfall måste man deklarera Enemy med ett Room kanske?\r\n    //TODO man måste kanske ha något sätt att kolla så att enemyn faktiskt finns?\r\n\r\n    public void removeEnemy(Enemy enemy){\r\n\r\n         if(!enemies.isEmpty()){\r\n             if(enemies.remove(enemy)){\r\n\r\n                 if(isEnemiesDead()){\r\n                     spawnItem();\r\n                 }\r\n                 return;\r\n             }\r\n             else {\r\n                 throw new IllegalArgumentException();\r\n             }\r\n         }\r\n    }\r\n\r\n    public Item[] getITEMS() {\r\n        return ITEMS;\r\n    }\r\n\r\n    //Denna nås av test genom andra metoder, men kan inte testas direkt eftersom den är privat.\r\n    //Man bör fråga sig om denna bör vara publik, samt att den har begränsingar (MIN <= MAX exempelvis)\r\n    public int generateRandomNumber(int min, int max) {\r\n\r\n\r\n        if (min < 1  || max < 1 || min > max) {\r\n            throw new IllegalArgumentException();\r\n        } else {\r\n            max+=1;\r\n\r\n            return (int) ((Math.random() * (max - min)) + min);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- rogue_like/src/main/java/Room.java	(revision dc535f6f81653a2b5d120f1bea62d837733a4318)
+++ rogue_like/src/main/java/Room.java	(date 1604182366320)
@@ -9,6 +9,7 @@
 //TODO ändra spawnItem till att inte vara random
 
 import java.util.ArrayList;
+import java.util.Arrays;
 
 public class Room {
 
@@ -41,12 +42,13 @@
      private final int MIN_AMOUNT_OF_ENEMIES = 4;
      private final int MAX_NUMBER_LUCKY_WHEEL = 5;
 
-     private ArrayList<Enemy> enemies; //denna ska ändras till en arraylist efter funderande
+     private ArrayList<Enemy> enemies;
      private int enemyQuantity;
      private String roomType;
      private Element element;
      private int threshold;
      private Player player;
+     private LuckyWheel luckyWheel;
 
      //TODO borde player vara ett argument i konstruktorn?
 
@@ -145,12 +147,8 @@
     }
 
     public boolean shouldBossSpawn(){
-         int medallions =0;
-         String elementName = getElement().getClass().getName();
-         if(elementName.equals("FireElement"))
-             medallions = player.getFireMedallions();   // TODO Jag tog bort "get-metoderna för medaljongerna då jag skapade metoden "fetchMedallionStatus" /Malin
-         else if(elementName.equals("EarthElement"))
-             medallions = player.getEarthMedallions();
+
+         int medallions = player.fetchMedallionStatus(getElement());
 
          if(medallions == 3){
              return true;
@@ -165,9 +163,12 @@
 
     //TODO göra en klass för lucky wheel?
     public void spawnLuckyWheel(){
+         luckyWheel = new LuckyWheel(this);
+     }
 
-
-    }
+     public LuckyWheel getLuckyWheel(){
+         return luckyWheel;
+     }
 
     public Item spawnItem(){
          return ITEMS[generateRandomNumber(1,ITEMS.length-1)];
@@ -183,7 +184,7 @@
     }
 
     public ArrayList<Enemy> getEnemies(){
-        return enemies;
+        return new ArrayList<Enemy>(enemies);
     }
 
     public boolean isEnemiesDead() {
@@ -225,7 +226,7 @@
     }
 
     public Item[] getITEMS() {
-        return ITEMS;
+        return Arrays.copyOf(ITEMS, ITEMS.length);
     }
 
     //Denna nås av test genom andra metoder, men kan inte testas direkt eftersom den är privat.
